<?php
require_once('vendor/autoload.php');
variable_set('stripeplan_node_type','planes');
variable_set('stripesubscription_node_type','suscripcion');
variable_set('stripe_product_id','prod_D04cKtIBQpS2XO');
variable_set('stripe_skey','sk_test_klIdWLLCaAbavpHCTJoMye0t');
variable_set('stripe_user_field_customer_id','field_stripe_customer_id');
variable_set('stripe_user_field_src_json','field_src_json_info');



/**
 * @file
 * Este modulo es una utileria para ayudar a manejar stripe.
 */

/**
 * Implements hook_boot().
 */
function stripein_boot() {
	error_log("testing error log 1.2");
}

function stripein_entity_presave($entity) {
	error_log("entering stripein_entity_presave 2.4");
	$stripeplan_node_type = variable_get('stripeplan_node_type');
	$stripesubscription_node_type = variable_get('stripesubscription_node_type');
	$stripe_product_id = variable_get('stripe_product_id');
	$stripe_skey = variable_get('stripe_skey');
	$stripe_user_field_customer_id = variable_get('stripe_user_field_customer_id');
	$stripe_user_field_src_json = variable_get('stripe_user_field_src_json');
	//error_log($entity->field_mock_sus);
	\Stripe\Stripe::setApiKey($stripe_skey);
	\Stripe\Stripe::setApiVersion("2018-05-21");
	//si es un usuario
	if(isset($entity->uid) && isset($entity->roles)){
		error_log('es un usuario wow');
		//$customerfield = $entity->{$stripe_user_field_customer_id};

		if(sizeof($entity->{$stripe_user_field_customer_id}["und"]) > 0){
			//si ya existe el customer id, 
			$c = \Stripe\Customer::retrieve($entity->{$stripe_user_field_customer_id}["und"][0]["value"]);
			updateSrcData($c, $entity); //administrar sources
		}else if(isset($entity->field_useremail["und"][0]["email"])){
			error_log('creating a new stripe customer');
			$customer = \Stripe\Customer::create(array(
			  "email" => $entity->field_useremail["und"][0]["email"],
			  "description" => "Customer for ".$entity->field_useremail["und"][0]["email"]
			));
			$entity->field_stripe_customer_id["und"][0]["value"] = $customer->id;
			updateSrcData($customer, $entity); //si hay sources se agregan
		}
	}
	//si es un nodo de tipo suscripcion
	if( isset($entity->type) && ( strcmp($entity->type,$stripesubscription_node_type) === 0 )){
		error_log("stripein_entity_presave is stripein subscription");

		/*echo($entity->field_stripe_src_sus_id["und"][0]["value"]."/");
		echo($entity->field_stripe_cus_sub_id["und"][0]["value"]."/");
		echo($entity->field_plan_sus["und"][0]["nid"]."/");
		echo($plan->field_stripe_id["und"][0]["value"]."/");*/
		if(sizeof($entity->field_stripe_sus_id["und"]) === 0){
		$plan = node_load($entity->field_plan_sus["und"][0]["nid"]);
		$customer = \Stripe\Customer::retrieve($entity->field_stripe_cus_sub_id["und"][0]["value"]);
		$customer->default_source = $entity->field_stripe_src_sus_id["und"][0]["value"];
		$customer->save();
		//poner la tarjeta seleccionada como default payment method.
		//al crear la subscripcion se quiere crear una subscripcion por stripe
		//no hay src pero si carga el src que creo que pedo.
		//mandar src al usuario.
		

		$subscription = \Stripe\Subscription::create([
		    'customer' => $entity->field_stripe_cus_sub_id["und"][0]["value"],
		    'source' => $entity->field_stripe_src_sus_id["und"][0]["value"],
		    'items' => [['plan' => $plan->field_stripe_id["und"][0]["value"] ]],
		]);
		$entity->field_stripe_sus_id["und"][0]["value"] = $subscription->id;
			
		}

		if(sizeof($entity->field_invitation_code["und"]) === 0){
			$entity->field_invitation_code["und"][0]['value'] = getRandomInvitationCode();
		}
			//actualizar json de doctores.
			$entity->field_doctores_json['und'][0]['value'] = getDoctoresSubscriptionJson($entity->field_doctores);
		
	}
	//si es un nodo de tipo plan
	if( isset($entity->type) && ( strcmp($entity->type,$stripeplan_node_type) === 0 )){
		error_log("stripein_entity_presave is stripein node");
		//$entity->field_stripe_id["und"][0]["value"]='cambiado';
		if($entity->is_new){
			$plan = \Stripe\Plan::create(array(
		  "amount" => (integer)$entity->field_costo["und"][0]["value"],
		  "interval" => "month",
		  "product" => $stripe_product_id,
		  "currency" => "mxn",
		  "nickname" => $entity->title
		));
			$entity->field_stripe_id["und"][0]["value"]=$plan->id;
		}else{
			$p = \Stripe\Plan::retrieve($entity->field_stripe_id["und"][0]["value"]);
			$change = false;
			if($p->amount !== (integer)$entity->field_costo["und"][0]["value"]){$change = true;}
			if(strcmp($p->nickname,$entity->title) !== 0){$change = true;}
			if($change){
				error_log('stripe plan has changed, so needs to recreate.');
				$p->delete();
				$plan = \Stripe\Plan::create(array(
			  "id"=> $entity->field_stripe_id["und"][0]["value"],
			  "amount" => (integer)$entity->field_costo["und"][0]["value"],
			  "interval" => "day",
			  "product" => $stripe_product_id,
			  "currency" => "mxn",
			  "nickname" => $entity->title

			));
			}else{
				error_log('stripe plan has not changed, nothing done.');
			}
			/*$p->amount = (integer)$entity->field_costo["und"][0]["value"];
			$p->nickname = $entity->title;
			var_dump($p);
			$p->save();
			die();*/
		}
	}
}


/*t
	lo que voy a hacer cuando se agrege un tipo de pago va a ser acualizar usuario. 
	colocar el src en el field y enviarlo a drupal, 
	aqui se cacha y se agrega a stripe.

	ESTA FUNCION toma el campo de drupal y revisa la lista de src del customer de stripe. creando cualquier src que no encuentre.

*/

function updateSrcData($c, $entity ){
	$stripeplan_node_type = variable_get('stripeplan_node_type');
	$stripesubscription_node_type = variable_get('stripesubscription_node_type');
	$stripe_product_id = variable_get('stripe_product_id');
	$stripe_skey = variable_get('stripe_skey');
	$stripe_user_field_customer_id = variable_get('stripe_user_field_customer_id');
	$stripe_user_field_src_json = variable_get('stripe_user_field_src_json');
	$sources = $c->sources["data"]; //cargando sources de $c
		if(sizeof($entity->{$stripe_user_field_src_json}["und"]) > 0){ //si hay srcs en el campo json iterarlos
				//AGREGAR SOURCES QUE ESTEN EN EL USUARIO Y NO EN STRIPE
				foreach ($entity->{$stripe_user_field_src_json}["und"] as $key => $src) {
					$src_bd_id = json_decode($src["value"],true)["id"]; //obtener id del source
					$already_added = false; //settear esto a false para ver si no esta agregado
					foreach ($sources as $key => $stripe_src) { //iterar todas las sources ya agregadas a stripe para ver si esta ya esta.
						if(strcmp($stripe_src->id, $src_bd_id) === 0){ //si son iguales ya esta agregada
							$already_added = true;
							break;
						}
					}
					if(!$already_added){ //si no ha sido agregada, agregarla
						error_log("se agrego el source ".$src_bd_id);
						$c->sources->create(array("source" => $src_bd_id));
						$c->save();
					}
				}
				//ELIMINAR SOURCES QUE ESTEN EN STRIPE Y NO EN EL USUARIO
				foreach ($sources as $key => $stripe_src) {
					$existing = false;
					foreach ($entity->{$stripe_user_field_src_json}["und"] as $key => $src) {
								$src_bd_id = json_decode($src["value"],true)["id"]; //obtener id del source

								if(strcmp($stripe_src->id, $src_bd_id) === 0){
									$existing = true;
									break;
								}
							}
							if(!$existing){ //si no la encontro eliminarla
								error_log("se elimino el source ".$stripe_src->id."porque no se encontro");
								$c->sources->retrieve($stripe_src->id)->detach();
							}
				}
			}else{ //ELIMINAR TODOS LOS SOURCES SI NO HAY DATOS EN USUARIO
				foreach ($sources as $key => $stripe_src) {
					error_log("se elimino el source ".$stripe_src->id."porque no habia nada");
					$c->sources->retrieve($stripe_src->id)->detach();
				}
			}
}

function getDoctoresSubscriptionJson($doctores){
	$aux_arr = array();
	foreach ($doctores['und'] as $key => $doctor) {
		$user_fields = user_load($doctor['uid']);
		$aux_arr[$key] = array();
		$aux_arr[$key]['name'] = $user_fields->name;
		$aux_arr[$key]['uid'] = $doctor['uid'];
	}
	$json = json_encode($aux_arr);
	return $json;
}

function getRandomInvitationCode(){ //returns an unique string to save as an invitation code.
	$randomset = false;
	$ret = "";
		while(!$randomset){
			error_log("trying to generate a random number for this subscription");
		//crear un string random utilizando una libreria
		$factory = new RandomLib\Factory;
		$generator = $factory->getGenerator(new SecurityLib\Strength(SecurityLib\Strength::MEDIUM));
		$randomstring = $generator->generateString(25,'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
		//buscar si este random string existe en algun otro
			$query = new EntityFieldQuery();
			$query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'suscripcion')
			->fieldCondition('field_invitation_code', 'value', $randomstring, '=')
			->addMetaData('account', user_load(1));
			$result = $query->execute();
			if (isset($result['node'])) $randomset = false;
			else{ 
				//no se encontro nada en la bd con este randomstring, guardar el randomstring.
				$ret = $randomstring;
				$randomset = true;
			}
	    }
	return $ret;
}


